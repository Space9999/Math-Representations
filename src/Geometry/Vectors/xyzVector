public class xyzVector extends dVector {
	private double x; // Component Form
	private double y;
	private double z;
	
	// x, y, and z must be negative if they are representing negative directions on a typical hyperplane
	public xyzVector(double x, double y, double z) {
		super((float)Math.sqrt(x * x + y * y + z * z));
		this.x = x; this.y = y; this.z = z;
	}
	
	public double getX() {
		return x; 
	}
	
	public void setX(double x) {
		this.x = x;
		super.setDist((float)Math.sqrt(x * x + y * y + z * z));
	}
	
	public double getY() {
		return y; 
	}
	
	public void setY(double y) {
		this.y = y;
		super.setDist((float)Math.sqrt(x * x + y * y + z * z));
	}
	
	public double getZ() {
		return z; 
	}
	
	public void setZ(double z) {
		this.z = z;
		super.setDist((float)Math.sqrt(x * x + y * y + z * z));
	}
	
	public double[] getXYZ() {
		double[] coords = {x, y, z};
		return coords;
	}
	
	public void setXYZ(double x, double y, double z) {
		this.z = z;
		super.setDist((float)Math.sqrt(x * x + y * y + z * z));
	}

	public float getDist() {
		return super.getDist();
	}
	
	public xyzVector vectorAdd(xyzVector other) {
		return new xyzVector(x + other.getX(), y + other.getY(), z + other.getZ());
	}
	
	public xyzVector vectorSubtract(xyzVector other) {
		return new xyzVector(x - other.getX(), y - other.getY(), z - other.getZ());
	}
	
	public xyzVector vectorMultiply(double factor) {
		return new xyzVector(x * factor, y * factor, z * factor);
	}
	
	public double dotProduct(xyzVector other) {
		return (other.getX() * x) + (other.getY() * y) + (other.getZ() * z);
	}
	
	public xyzVector crossProduct(xyzVector other) {
		return new xyzVector(y * other.getZ() - z * other.getY(), -1.0 * (x * other.getZ() - z * other.getX()), x * other.getY() - y * other.getX());
	}
	
	public double angleBetween(xyzVector other) {
		return Math.toDegrees(Math.acos(dotProduct(other) / (super.getDist() * other.getDist())));
	}

}
